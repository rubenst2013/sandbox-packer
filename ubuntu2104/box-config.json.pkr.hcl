# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/templates/hcl_templates/variables#type-constraints for more info.
variable "branch_name" {
  type    = string
  default = ""
}

variable "build_number" {
  type    = string
  default = ""
}

variable "version" {
  type    = string
  default = ""
}

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
source "virtualbox-iso" "ubuntu_server_21_04" {
  boot_command             = [
                " <wait><wait><wait><wait>c<wait>",
                "set gfxpayload=keep",
                "<enter><wait>",
                "linux /casper/vmlinuz quiet<wait>",
                " autoinstall<wait>",
                " ds=nocloud-net<wait>",
                "\\;s=http://<wait>",
                "{{.HTTPIP}}<wait>",
                ":{{.HTTPPort}}/<wait>",
                " ---",
                "<enter><wait>",
                "initrd /casper/initrd<wait>",
                "<enter><wait>",
                "boot<enter><wait>"
    ]
  boot_wait                = "5s"
  disk_size                = 30720
  guest_additions_path     = "VBoxGuestAdditions_{{ .Version }}.iso"
  guest_os_type            = "Ubuntu_64"
  hard_drive_discard       = true
  hard_drive_interface     = "scsi"
  hard_drive_nonrotational = true
  headless                 = false
  http_directory           = "http"
  iso_checksum             = "sha256:e4089c47104375b59951bad6c7b3ee5d9f6d80bfac4597e43a716bb8f5c1f3b0"
  iso_urls                 = ["iso/ubuntu-21.04-live-server-amd64.iso", "https://releases.ubuntu.com/21.04/ubuntu-21.04-live-server-amd64.iso"]
  keep_registered          = false
  post_shutdown_delay      = "2m"
  shutdown_command         = "echo 'vagrant'|sudo -S shutdown -P now"
  skip_export              = false
  ssh_handshake_attempts   = "3000"
  ssh_password             = "vagrant"
  ssh_port                 = 22
  ssh_timeout              = "60m"
  ssh_username             = "vagrant"
  vboxmanage               = [
   ["modifyvm", "{{ .Name }}", "--memory", "24576"],
      ["modifyvm", "{{ .Name }}", "--cpus", "4"],
      ["modifyvm", "{{ .Name }}", "--vram", "128"],
      ["createmedium", "disk", "--filename", "swap_00.vdi", "--size", "8192", "--format", "vdi", "--variant", "Standard"],
      ["createmedium", "disk", "--filename", "var_00.vdi", "--size", "204800", "--format", "vdi", "--variant", "Standard"],
      ["createmedium", "disk", "--filename", "tmp_00.vdi", "--size", "102400", "--format", "vdi", "--variant", "Standard"],
      ["createmedium", "disk", "--filename", "home_00.vdi", "--size", "51200", "--format", "vdi", "--variant", "Standard"],
      ["storagectl", "{{ .Name }}", "--name", "SCSI Controller", "--hostiocache", "on"],
      ["storageattach", "{{ .Name }}", "--storagectl", "SCSI Controller", "--port", "1", "--device", "0", "--type", "hdd",
        "--medium", "swap_00.vdi", "--mtype", "normal", "--nonrotational", "on", "--discard", "on"],
      ["storageattach", "{{ .Name }}", "--storagectl", "SCSI Controller", "--port", "2", "--device", "0", "--type", "hdd",
        "--medium", "var_00.vdi", "--mtype", "normal", "--nonrotational", "on", "--discard", "on"],
      ["storageattach", "{{ .Name }}", "--storagectl", "SCSI Controller", "--port", "3", "--device", "0", "--type", "hdd",
        "--medium", "tmp_00.vdi", "--mtype", "normal", "--nonrotational", "on", "--discard", "on"],
      ["storageattach", "{{ .Name }}", "--storagectl", "SCSI Controller", "--port", "4", "--device", "0", "--type", "hdd",
        "--medium", "home_00.vdi", "--mtype", "normal", "--nonrotational", "on", "--discard", "on"]
    ]
  virtualbox_version_file  = ".vbox_version"
  vm_name                  = "packer-ubuntu-2004-${var.version}-${var.build_number}-${var.branch_name}"
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = ["source.virtualbox-iso.ubuntu_server_21_04"]

  provisioner "shell" {
    execute_command = "echo 'vagrant' | {{ .Vars }} sudo -S -E bash '{{ .Path }}'"
    inline          = ["unset -f command_not_found_handle"]
    inline_shebang  = "#!/bin/bash -e"
  }

  provisioner "shell" {
    execute_command = "echo 'vagrant' | {{ .Vars }} sudo -S -E bash '{{ .Path }}'"
    script          = "scripts/ansible.sh"
  }

  provisioner "shell" {
    execute_command = "echo 'vagrant' | {{ .Vars }} sudo -S -E bash '{{ .Path }}'"
    script          = "scripts/setup.sh"
  }

  provisioner "file" {
    destination = "/tmp/ubuntu-mainline-kernel.sh"
    source      = "files/ubuntu-mainline-kernel.sh"
  }

  provisioner "shell" {
    execute_command = "echo 'vagrant' | {{ .Vars }} sudo -S -E bash '{{ .Path }}'"
    script          = "scripts/kernel_update.sh"
  }

  provisioner "shell" {
    execute_command   = "echo 'vagrant' | {{ .Vars }} sudo -S -E bash '{{ .Path }}'"
    expect_disconnect = true
    inline            = ["echo 'Rebooting system now!'", "systemctl reboot"]
    inline_shebang    = "#!/bin/bash -e"
    timeout           = "15m0s"
  }

  provisioner "shell" {
    execute_command = "echo 'vagrant' | {{ .Vars }} sudo -S -E bash '{{ .Path }}'"
    inline          = ["echo 'Rebooting complete. Continuing with provisioning...'"]
    inline_shebang  = "#!/bin/bash -e"
    pause_before    = "2m0s"
  }

  provisioner "ansible-local" {
    galaxy_file   = "../shared/requirements.yml"
    playbook_dir  = "../shared/"
    playbook_file = "../shared/main.yml"
  }

  provisioner "shell" {
    execute_command = "echo 'vagrant' | {{ .Vars }} sudo -S -E bash '{{ .Path }}'"
    script          = "scripts/cleanup.sh"
  }

  provisioner "shell" {
    execute_command = "echo 'vagrant' | {{ .Vars }} sudo -S -E bash '{{ .Path }}'"
    inline          = ["echo 'Gave the host a few seconds to actually shrink the data files. Continuing...'", "echo -n > /etc/machine-id"]
    inline_shebang  = "#!/bin/bash -e"
    pause_before    = "30s"
  }

  post-processor "vagrant" {
    output = "builds/virtualbox-ubuntu-2104-${var.version}-${var.build_number}-${var.branch_name}.box"
  }
}
